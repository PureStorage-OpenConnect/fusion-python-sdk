# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from fusion.models.resource_post import ResourcePost  # noqa: F401,E501

class PlacementRecommendationPost(ResourcePost):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'placement_group_link': 'str',
        'placement_engine': 'PlacementEngine'
    }
    if hasattr(ResourcePost, "swagger_types"):
        swagger_types.update(ResourcePost.swagger_types)

    attribute_map = {
        'placement_group_link': 'placement_group_link',
        'placement_engine': 'placement_engine'
    }
    if hasattr(ResourcePost, "attribute_map"):
        attribute_map.update(ResourcePost.attribute_map)

    def __init__(self, placement_group_link=None, placement_engine=None, *args, **kwargs):  # noqa: E501
        """PlacementRecommendationPost - a model defined in Swagger"""  # noqa: E501
        self._placement_group_link = None
        self._placement_engine = None
        self.discriminator = None
        self.placement_group_link = placement_group_link
        if placement_engine is not None:
            self.placement_engine = placement_engine
        ResourcePost.__init__(self, *args, **kwargs)

    @property
    def placement_group_link(self):
        """Gets the placement_group_link of this PlacementRecommendationPost.  # noqa: E501

        The link to the placement group that we would like to generate a placement recommendation report on  # noqa: E501

        :return: The placement_group_link of this PlacementRecommendationPost.  # noqa: E501
        :rtype: str
        """
        return self._placement_group_link

    @placement_group_link.setter
    def placement_group_link(self, placement_group_link):
        """Sets the placement_group_link of this PlacementRecommendationPost.

        The link to the placement group that we would like to generate a placement recommendation report on  # noqa: E501

        :param placement_group_link: The placement_group_link of this PlacementRecommendationPost.  # noqa: E501
        :type: str
        """
        if placement_group_link is None:
            raise ValueError("Invalid value for `placement_group_link`, must not be `None`")  # noqa: E501

        self._placement_group_link = placement_group_link

    @property
    def placement_engine(self):
        """Gets the placement_engine of this PlacementRecommendationPost.  # noqa: E501


        :return: The placement_engine of this PlacementRecommendationPost.  # noqa: E501
        :rtype: PlacementEngine
        """
        return self._placement_engine

    @placement_engine.setter
    def placement_engine(self, placement_engine):
        """Sets the placement_engine of this PlacementRecommendationPost.


        :param placement_engine: The placement_engine of this PlacementRecommendationPost.  # noqa: E501
        :type: PlacementEngine
        """

        self._placement_engine = placement_engine

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlacementRecommendationPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlacementRecommendationPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
