# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pure1MetaPlacementRecommendationObjectives(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avg_perf': 'float',
        'avg_cap': 'float',
        'var_perf': 'float',
        'var_cap': 'float',
        'max_perf': 'float',
        'max_cap': 'float'
    }

    attribute_map = {
        'avg_perf': 'avg_perf',
        'avg_cap': 'avg_cap',
        'var_perf': 'var_perf',
        'var_cap': 'var_cap',
        'max_perf': 'max_perf',
        'max_cap': 'max_cap'
    }

    def __init__(self, avg_perf=None, avg_cap=None, var_perf=None, var_cap=None, max_perf=None, max_cap=None):  # noqa: E501
        """Pure1MetaPlacementRecommendationObjectives - a model defined in Swagger"""  # noqa: E501
        self._avg_perf = None
        self._avg_cap = None
        self._var_perf = None
        self._var_cap = None
        self._max_perf = None
        self._max_cap = None
        self.discriminator = None
        if avg_perf is not None:
            self.avg_perf = avg_perf
        if avg_cap is not None:
            self.avg_cap = avg_cap
        if var_perf is not None:
            self.var_perf = var_perf
        if var_cap is not None:
            self.var_cap = var_cap
        if max_perf is not None:
            self.max_perf = max_perf
        if max_cap is not None:
            self.max_cap = max_cap

    @property
    def avg_perf(self):
        """Gets the avg_perf of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The avg_perf of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._avg_perf

    @avg_perf.setter
    def avg_perf(self, avg_perf):
        """Sets the avg_perf of this Pure1MetaPlacementRecommendationObjectives.


        :param avg_perf: The avg_perf of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._avg_perf = avg_perf

    @property
    def avg_cap(self):
        """Gets the avg_cap of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The avg_cap of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._avg_cap

    @avg_cap.setter
    def avg_cap(self, avg_cap):
        """Sets the avg_cap of this Pure1MetaPlacementRecommendationObjectives.


        :param avg_cap: The avg_cap of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._avg_cap = avg_cap

    @property
    def var_perf(self):
        """Gets the var_perf of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The var_perf of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._var_perf

    @var_perf.setter
    def var_perf(self, var_perf):
        """Sets the var_perf of this Pure1MetaPlacementRecommendationObjectives.


        :param var_perf: The var_perf of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._var_perf = var_perf

    @property
    def var_cap(self):
        """Gets the var_cap of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The var_cap of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._var_cap

    @var_cap.setter
    def var_cap(self, var_cap):
        """Sets the var_cap of this Pure1MetaPlacementRecommendationObjectives.


        :param var_cap: The var_cap of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._var_cap = var_cap

    @property
    def max_perf(self):
        """Gets the max_perf of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The max_perf of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._max_perf

    @max_perf.setter
    def max_perf(self, max_perf):
        """Sets the max_perf of this Pure1MetaPlacementRecommendationObjectives.


        :param max_perf: The max_perf of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._max_perf = max_perf

    @property
    def max_cap(self):
        """Gets the max_cap of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The max_cap of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._max_cap

    @max_cap.setter
    def max_cap(self, max_cap):
        """Sets the max_cap of this Pure1MetaPlacementRecommendationObjectives.


        :param max_cap: The max_cap of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._max_cap = max_cap

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pure1MetaPlacementRecommendationObjectives, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pure1MetaPlacementRecommendationObjectives):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
