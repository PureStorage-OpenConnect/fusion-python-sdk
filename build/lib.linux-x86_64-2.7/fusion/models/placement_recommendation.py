# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from fusion.models.resource_metadata import ResourceMetadata  # noqa: F401,E501

class PlacementRecommendation(ResourceMetadata):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arrays': 'list[PlacementRecommendationIncludedArray]',
        'excluded_arrays': 'list[PlacementRecommendationExcludedArray]'
    }
    if hasattr(ResourceMetadata, "swagger_types"):
        swagger_types.update(ResourceMetadata.swagger_types)

    attribute_map = {
        'arrays': 'arrays',
        'excluded_arrays': 'excluded_arrays'
    }
    if hasattr(ResourceMetadata, "attribute_map"):
        attribute_map.update(ResourceMetadata.attribute_map)

    def __init__(self, arrays=None, excluded_arrays=None, *args, **kwargs):  # noqa: E501
        """PlacementRecommendation - a model defined in Swagger"""  # noqa: E501
        self._arrays = None
        self._excluded_arrays = None
        self.discriminator = None
        if arrays is not None:
            self.arrays = arrays
        if excluded_arrays is not None:
            self.excluded_arrays = excluded_arrays
        ResourceMetadata.__init__(self, *args, **kwargs)

    @property
    def arrays(self):
        """Gets the arrays of this PlacementRecommendation.  # noqa: E501

        A JSON array of Arrays that the Placement Group can be placed/migrated to  # noqa: E501

        :return: The arrays of this PlacementRecommendation.  # noqa: E501
        :rtype: list[PlacementRecommendationIncludedArray]
        """
        return self._arrays

    @arrays.setter
    def arrays(self, arrays):
        """Sets the arrays of this PlacementRecommendation.

        A JSON array of Arrays that the Placement Group can be placed/migrated to  # noqa: E501

        :param arrays: The arrays of this PlacementRecommendation.  # noqa: E501
        :type: list[PlacementRecommendationIncludedArray]
        """

        self._arrays = arrays

    @property
    def excluded_arrays(self):
        """Gets the excluded_arrays of this PlacementRecommendation.  # noqa: E501

        A JSON array of Arrays that the Placement Group cannot be placed on  # noqa: E501

        :return: The excluded_arrays of this PlacementRecommendation.  # noqa: E501
        :rtype: list[PlacementRecommendationExcludedArray]
        """
        return self._excluded_arrays

    @excluded_arrays.setter
    def excluded_arrays(self, excluded_arrays):
        """Sets the excluded_arrays of this PlacementRecommendation.

        A JSON array of Arrays that the Placement Group cannot be placed on  # noqa: E501

        :param excluded_arrays: The excluded_arrays of this PlacementRecommendation.  # noqa: E501
        :type: list[PlacementRecommendationExcludedArray]
        """

        self._excluded_arrays = excluded_arrays

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlacementRecommendation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlacementRecommendation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
