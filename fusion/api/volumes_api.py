# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fusion.api_client import ApiClient


class VolumesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_volume(self, body, tenant_name, tenant_space_name, **kwargs):  # noqa: E501
        """Creates a Volume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_volume(body, tenant_name, tenant_space_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VolumePost body: (required)
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_volume_with_http_info(body, tenant_name, tenant_space_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_volume_with_http_info(body, tenant_name, tenant_space_name, **kwargs)  # noqa: E501
            return data

    def create_volume_with_http_info(self, body, tenant_name, tenant_space_name, **kwargs):  # noqa: E501
        """Creates a Volume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_volume_with_http_info(body, tenant_name, tenant_space_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VolumePost body: (required)
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'tenant_name', 'tenant_space_name', 'x_request_id', 'authorization', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_volume`")  # noqa: E501
        # verify the required parameter 'tenant_name' is set
        if ('tenant_name' not in params or
                params['tenant_name'] is None):
            raise ValueError("Missing the required parameter `tenant_name` when calling `create_volume`")  # noqa: E501
        # verify the required parameter 'tenant_space_name' is set
        if ('tenant_space_name' not in params or
                params['tenant_space_name'] is None):
            raise ValueError("Missing the required parameter `tenant_space_name` when calling `create_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_name' in params:
            path_params['tenant_name'] = params['tenant_name']  # noqa: E501
        if 'tenant_space_name' in params:
            path_params['tenant_space_name'] = params['tenant_space_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tenants/{tenant_name}/tenant-spaces/{tenant_space_name}/volumes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Operation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_volume(self, tenant_name, tenant_space_name, volume_name, **kwargs):  # noqa: E501
        """Eradicate a specific volume. Volume has to be destroyed before it can be eradicated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_volume(tenant_name, tenant_space_name, volume_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str volume_name: The Volume name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_volume_with_http_info(tenant_name, tenant_space_name, volume_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_volume_with_http_info(tenant_name, tenant_space_name, volume_name, **kwargs)  # noqa: E501
            return data

    def delete_volume_with_http_info(self, tenant_name, tenant_space_name, volume_name, **kwargs):  # noqa: E501
        """Eradicate a specific volume. Volume has to be destroyed before it can be eradicated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_volume_with_http_info(tenant_name, tenant_space_name, volume_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str volume_name: The Volume name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_name', 'tenant_space_name', 'volume_name', 'x_request_id', 'authorization', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_name' is set
        if ('tenant_name' not in params or
                params['tenant_name'] is None):
            raise ValueError("Missing the required parameter `tenant_name` when calling `delete_volume`")  # noqa: E501
        # verify the required parameter 'tenant_space_name' is set
        if ('tenant_space_name' not in params or
                params['tenant_space_name'] is None):
            raise ValueError("Missing the required parameter `tenant_space_name` when calling `delete_volume`")  # noqa: E501
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params or
                params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `delete_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_name' in params:
            path_params['tenant_name'] = params['tenant_name']  # noqa: E501
        if 'tenant_space_name' in params:
            path_params['tenant_space_name'] = params['tenant_space_name']  # noqa: E501
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tenants/{tenant_name}/tenant-spaces/{tenant_space_name}/volumes/{volume_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Operation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume(self, tenant_name, tenant_space_name, volume_name, **kwargs):  # noqa: E501
        """Gets a specific Volume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume(tenant_name, tenant_space_name, volume_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str volume_name: The Volume name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_with_http_info(tenant_name, tenant_space_name, volume_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_with_http_info(tenant_name, tenant_space_name, volume_name, **kwargs)  # noqa: E501
            return data

    def get_volume_with_http_info(self, tenant_name, tenant_space_name, volume_name, **kwargs):  # noqa: E501
        """Gets a specific Volume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_with_http_info(tenant_name, tenant_space_name, volume_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str volume_name: The Volume name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_name', 'tenant_space_name', 'volume_name', 'x_request_id', 'authorization', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_name' is set
        if ('tenant_name' not in params or
                params['tenant_name'] is None):
            raise ValueError("Missing the required parameter `tenant_name` when calling `get_volume`")  # noqa: E501
        # verify the required parameter 'tenant_space_name' is set
        if ('tenant_space_name' not in params or
                params['tenant_space_name'] is None):
            raise ValueError("Missing the required parameter `tenant_space_name` when calling `get_volume`")  # noqa: E501
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params or
                params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `get_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_name' in params:
            path_params['tenant_name'] = params['tenant_name']  # noqa: E501
        if 'tenant_space_name' in params:
            path_params['tenant_space_name'] = params['tenant_space_name']  # noqa: E501
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tenants/{tenant_name}/tenant-spaces/{tenant_space_name}/volumes/{volume_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Volume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume_by_id(self, volume_id, **kwargs):  # noqa: E501
        """Gets a specific Volume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_by_id(volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_id: The Volume ID (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_by_id_with_http_info(volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_by_id_with_http_info(volume_id, **kwargs)  # noqa: E501
            return data

    def get_volume_by_id_with_http_info(self, volume_id, **kwargs):  # noqa: E501
        """Gets a specific Volume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_by_id_with_http_info(volume_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_id: The Volume ID (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Volume
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_id', 'x_request_id', 'authorization', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_id' is set
        if ('volume_id' not in params or
                params['volume_id'] is None):
            raise ValueError("Missing the required parameter `volume_id` when calling `get_volume_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_id' in params:
            path_params['volume_id'] = params['volume_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/resources/volumes/{volume_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Volume',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume_performance(self, tenant_name, tenant_space_name, volume_name, **kwargs):  # noqa: E501
        """(Provider) Gets performance metrics of a specific Volume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_performance(tenant_name, tenant_space_name, volume_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str volume_name: The Volume name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Performance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_performance_with_http_info(tenant_name, tenant_space_name, volume_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_performance_with_http_info(tenant_name, tenant_space_name, volume_name, **kwargs)  # noqa: E501
            return data

    def get_volume_performance_with_http_info(self, tenant_name, tenant_space_name, volume_name, **kwargs):  # noqa: E501
        """(Provider) Gets performance metrics of a specific Volume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_performance_with_http_info(tenant_name, tenant_space_name, volume_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str volume_name: The Volume name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Performance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_name', 'tenant_space_name', 'volume_name', 'x_request_id', 'authorization', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume_performance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_name' is set
        if ('tenant_name' not in params or
                params['tenant_name'] is None):
            raise ValueError("Missing the required parameter `tenant_name` when calling `get_volume_performance`")  # noqa: E501
        # verify the required parameter 'tenant_space_name' is set
        if ('tenant_space_name' not in params or
                params['tenant_space_name'] is None):
            raise ValueError("Missing the required parameter `tenant_space_name` when calling `get_volume_performance`")  # noqa: E501
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params or
                params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `get_volume_performance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_name' in params:
            path_params['tenant_name'] = params['tenant_name']  # noqa: E501
        if 'tenant_space_name' in params:
            path_params['tenant_space_name'] = params['tenant_space_name']  # noqa: E501
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tenants/{tenant_name}/tenant-spaces/{tenant_space_name}/volumes/{volume_name}/performance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Performance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume_space(self, tenant_name, tenant_space_name, volume_name, **kwargs):  # noqa: E501
        """(Provider) Gets space metrics of a specific Volume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_space(tenant_name, tenant_space_name, volume_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str volume_name: The Volume name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Space
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_space_with_http_info(tenant_name, tenant_space_name, volume_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_space_with_http_info(tenant_name, tenant_space_name, volume_name, **kwargs)  # noqa: E501
            return data

    def get_volume_space_with_http_info(self, tenant_name, tenant_space_name, volume_name, **kwargs):  # noqa: E501
        """(Provider) Gets space metrics of a specific Volume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_space_with_http_info(tenant_name, tenant_space_name, volume_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str volume_name: The Volume name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Space
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_name', 'tenant_space_name', 'volume_name', 'x_request_id', 'authorization', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_name' is set
        if ('tenant_name' not in params or
                params['tenant_name'] is None):
            raise ValueError("Missing the required parameter `tenant_name` when calling `get_volume_space`")  # noqa: E501
        # verify the required parameter 'tenant_space_name' is set
        if ('tenant_space_name' not in params or
                params['tenant_space_name'] is None):
            raise ValueError("Missing the required parameter `tenant_space_name` when calling `get_volume_space`")  # noqa: E501
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params or
                params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `get_volume_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_name' in params:
            path_params['tenant_name'] = params['tenant_name']  # noqa: E501
        if 'tenant_space_name' in params:
            path_params['tenant_space_name'] = params['tenant_space_name']  # noqa: E501
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tenants/{tenant_name}/tenant-spaces/{tenant_space_name}/volumes/{volume_name}/space', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Space',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_volumes(self, tenant_name, tenant_space_name, **kwargs):  # noqa: E501
        """Gets a list of all Volumes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_volumes(tenant_name, tenant_space_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :param str filter: filter should use expression language for filtering
        :param str sort: Returns the response items in the order specified. Set sort to the field(s) in the response by which to sort. Sorting can be performed on any of the fields in the response, and the items can be sorted in ascending or descending order by these fields. By default, the response items are sorted in ascending order. To sort in descending order, append the minus sign (-) to the field. A single request can be sorted on multiple fields. For example, you can sort all volumes from largest to smallest volume size, and then sort volumes of the same size in ascending order by volume name. To sort on multiple fields, list the fields as comma-separated values. (E.g. \"sort=size-,name\")
        :param int limit:
        :param int offset:
        :param str id:
        :param str name:
        :param str display_name:
        :param str serial_number:
        :param int size:
        :param int created_at:
        :param str storage_class_id:
        :param str placement_group_id:
        :param str protection_policy_id:
        :param str array_id:
        :param str source_volume_snapshot_id:
        :param str iqn:
        :param bool destroyed:
        :param int time_remaining:
        :return: VolumeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_volumes_with_http_info(tenant_name, tenant_space_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_volumes_with_http_info(tenant_name, tenant_space_name, **kwargs)  # noqa: E501
            return data

    def list_volumes_with_http_info(self, tenant_name, tenant_space_name, **kwargs):  # noqa: E501
        """Gets a list of all Volumes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_volumes_with_http_info(tenant_name, tenant_space_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :param str filter: filter should use expression language for filtering
        :param str sort: Returns the response items in the order specified. Set sort to the field(s) in the response by which to sort. Sorting can be performed on any of the fields in the response, and the items can be sorted in ascending or descending order by these fields. By default, the response items are sorted in ascending order. To sort in descending order, append the minus sign (-) to the field. A single request can be sorted on multiple fields. For example, you can sort all volumes from largest to smallest volume size, and then sort volumes of the same size in ascending order by volume name. To sort on multiple fields, list the fields as comma-separated values. (E.g. \"sort=size-,name\")
        :param int limit:
        :param int offset:
        :param str id:
        :param str name:
        :param str display_name:
        :param str serial_number:
        :param int size:
        :param int created_at:
        :param str storage_class_id:
        :param str placement_group_id:
        :param str protection_policy_id:
        :param str array_id:
        :param str source_volume_snapshot_id:
        :param str iqn:
        :param bool destroyed:
        :param int time_remaining:
        :return: VolumeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_name', 'tenant_space_name', 'x_request_id', 'authorization', 'x_correlation_id', 'filter', 'sort', 'limit', 'offset', 'id', 'name', 'display_name', 'serial_number', 'size', 'created_at', 'storage_class_id', 'placement_group_id', 'protection_policy_id', 'array_id', 'source_volume_snapshot_id', 'iqn', 'destroyed', 'time_remaining']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_volumes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_name' is set
        if ('tenant_name' not in params or
                params['tenant_name'] is None):
            raise ValueError("Missing the required parameter `tenant_name` when calling `list_volumes`")  # noqa: E501
        # verify the required parameter 'tenant_space_name' is set
        if ('tenant_space_name' not in params or
                params['tenant_space_name'] is None):
            raise ValueError("Missing the required parameter `tenant_space_name` when calling `list_volumes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_name' in params:
            path_params['tenant_name'] = params['tenant_name']  # noqa: E501
        if 'tenant_space_name' in params:
            path_params['tenant_space_name'] = params['tenant_space_name']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serial_number', params['serial_number']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'created_at' in params:
            query_params.append(('created_at', params['created_at']))  # noqa: E501
        if 'storage_class_id' in params:
            query_params.append(('storage_class_id', params['storage_class_id']))  # noqa: E501
        if 'placement_group_id' in params:
            query_params.append(('placement_group_id', params['placement_group_id']))  # noqa: E501
        if 'protection_policy_id' in params:
            query_params.append(('protection_policy_id', params['protection_policy_id']))  # noqa: E501
        if 'array_id' in params:
            query_params.append(('array_id', params['array_id']))  # noqa: E501
        if 'source_volume_snapshot_id' in params:
            query_params.append(('source_volume_snapshot_id', params['source_volume_snapshot_id']))  # noqa: E501
        if 'iqn' in params:
            query_params.append(('iqn', params['iqn']))  # noqa: E501
        if 'destroyed' in params:
            query_params.append(('destroyed', params['destroyed']))  # noqa: E501
        if 'time_remaining' in params:
            query_params.append(('time_remaining', params['time_remaining']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tenants/{tenant_name}/tenant-spaces/{tenant_space_name}/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_volumes(self, **kwargs):  # noqa: E501
        """(Opt-in) Get all Volumes in the org. Provide a filter to search for specific volumes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_volumes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: filter should use expression language for filtering
        :param str sort: Returns the response items in the order specified. Set sort to the field(s) in the response by which to sort. Sorting can be performed on any of the fields in the response, and the items can be sorted in ascending or descending order by these fields. By default, the response items are sorted in ascending order. To sort in descending order, append the minus sign (-) to the field. A single request can be sorted on multiple fields. For example, you can sort all volumes from largest to smallest volume size, and then sort volumes of the same size in ascending order by volume name. To sort on multiple fields, list the fields as comma-separated values. (E.g. \"sort=size-,name\")
        :param int limit:
        :param int offset:
        :param str id:
        :param str name:
        :param str display_name:
        :param str serial_number:
        :param int size:
        :param int created_at:
        :param str tenant_space_id:
        :param str tenant_id:
        :param str storage_class_id:
        :param str placement_group_id:
        :param str protection_policy_id:
        :param str array_id:
        :param str source_volume_snapshot_id:
        :param str iqn:
        :param bool destroyed:
        :param int time_remaining:
        :param str host_access_policy_id:
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: VolumeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_volumes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.query_volumes_with_http_info(**kwargs)  # noqa: E501
            return data

    def query_volumes_with_http_info(self, **kwargs):  # noqa: E501
        """(Opt-in) Get all Volumes in the org. Provide a filter to search for specific volumes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_volumes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: filter should use expression language for filtering
        :param str sort: Returns the response items in the order specified. Set sort to the field(s) in the response by which to sort. Sorting can be performed on any of the fields in the response, and the items can be sorted in ascending or descending order by these fields. By default, the response items are sorted in ascending order. To sort in descending order, append the minus sign (-) to the field. A single request can be sorted on multiple fields. For example, you can sort all volumes from largest to smallest volume size, and then sort volumes of the same size in ascending order by volume name. To sort on multiple fields, list the fields as comma-separated values. (E.g. \"sort=size-,name\")
        :param int limit:
        :param int offset:
        :param str id:
        :param str name:
        :param str display_name:
        :param str serial_number:
        :param int size:
        :param int created_at:
        :param str tenant_space_id:
        :param str tenant_id:
        :param str storage_class_id:
        :param str placement_group_id:
        :param str protection_policy_id:
        :param str array_id:
        :param str source_volume_snapshot_id:
        :param str iqn:
        :param bool destroyed:
        :param int time_remaining:
        :param str host_access_policy_id:
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: VolumeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'sort', 'limit', 'offset', 'id', 'name', 'display_name', 'serial_number', 'size', 'created_at', 'tenant_space_id', 'tenant_id', 'storage_class_id', 'placement_group_id', 'protection_policy_id', 'array_id', 'source_volume_snapshot_id', 'iqn', 'destroyed', 'time_remaining', 'host_access_policy_id', 'x_request_id', 'authorization', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_volumes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serial_number', params['serial_number']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'created_at' in params:
            query_params.append(('created_at', params['created_at']))  # noqa: E501
        if 'tenant_space_id' in params:
            query_params.append(('tenant_space_id', params['tenant_space_id']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenant_id', params['tenant_id']))  # noqa: E501
        if 'storage_class_id' in params:
            query_params.append(('storage_class_id', params['storage_class_id']))  # noqa: E501
        if 'placement_group_id' in params:
            query_params.append(('placement_group_id', params['placement_group_id']))  # noqa: E501
        if 'protection_policy_id' in params:
            query_params.append(('protection_policy_id', params['protection_policy_id']))  # noqa: E501
        if 'array_id' in params:
            query_params.append(('array_id', params['array_id']))  # noqa: E501
        if 'source_volume_snapshot_id' in params:
            query_params.append(('source_volume_snapshot_id', params['source_volume_snapshot_id']))  # noqa: E501
        if 'iqn' in params:
            query_params.append(('iqn', params['iqn']))  # noqa: E501
        if 'destroyed' in params:
            query_params.append(('destroyed', params['destroyed']))  # noqa: E501
        if 'time_remaining' in params:
            query_params.append(('time_remaining', params['time_remaining']))  # noqa: E501
        if 'host_access_policy_id' in params:
            query_params.append(('host_access_policy_id', params['host_access_policy_id']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/resources/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_volume(self, body, tenant_name, tenant_space_name, volume_name, **kwargs):  # noqa: E501
        """Updates a Volume -- renaming, and resizing it; changing its Storage Class; changing its Placement Group; adding or removing host connections.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_volume(body, tenant_name, tenant_space_name, volume_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VolumePatch body: (required)
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str volume_name: The Volume name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_volume_with_http_info(body, tenant_name, tenant_space_name, volume_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_volume_with_http_info(body, tenant_name, tenant_space_name, volume_name, **kwargs)  # noqa: E501
            return data

    def update_volume_with_http_info(self, body, tenant_name, tenant_space_name, volume_name, **kwargs):  # noqa: E501
        """Updates a Volume -- renaming, and resizing it; changing its Storage Class; changing its Placement Group; adding or removing host connections.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_volume_with_http_info(body, tenant_name, tenant_space_name, volume_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VolumePatch body: (required)
        :param str tenant_name: The Tenant name (required)
        :param str tenant_space_name: The Tenant Space name (required)
        :param str volume_name: The Volume name (required)
        :param str x_request_id: The Request ID supplied with the request, used to perform operations idempotently.
        :param str authorization: Access token (in JWT format) required to use any API endpoint.
        :param str x_correlation_id: The Correlation ID provided will be added to log messages and can be used for support. The same Correlation ID may be used for separate requests, to track a higher level workflow.
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'tenant_name', 'tenant_space_name', 'volume_name', 'x_request_id', 'authorization', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_volume`")  # noqa: E501
        # verify the required parameter 'tenant_name' is set
        if ('tenant_name' not in params or
                params['tenant_name'] is None):
            raise ValueError("Missing the required parameter `tenant_name` when calling `update_volume`")  # noqa: E501
        # verify the required parameter 'tenant_space_name' is set
        if ('tenant_space_name' not in params or
                params['tenant_space_name'] is None):
            raise ValueError("Missing the required parameter `tenant_space_name` when calling `update_volume`")  # noqa: E501
        # verify the required parameter 'volume_name' is set
        if ('volume_name' not in params or
                params['volume_name'] is None):
            raise ValueError("Missing the required parameter `volume_name` when calling `update_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_name' in params:
            path_params['tenant_name'] = params['tenant_name']  # noqa: E501
        if 'tenant_space_name' in params:
            path_params['tenant_space_name'] = params['tenant_space_name']  # noqa: E501
        if 'volume_name' in params:
            path_params['volume_name'] = params['volume_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_correlation_id' in params:
            header_params['X-Correlation-ID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['accessToken', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/tenants/{tenant_name}/tenant-spaces/{tenant_space_name}/volumes/{volume_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Operation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
