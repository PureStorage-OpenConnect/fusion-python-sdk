# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pure1MetaWarning(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'warning_code': 'str'
    }

    attribute_map = {
        'message': 'message',
        'warning_code': 'warning_code'
    }

    def __init__(self, message=None, warning_code=None):  # noqa: E501
        """Pure1MetaWarning - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._warning_code = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if warning_code is not None:
            self.warning_code = warning_code

    @property
    def message(self):
        """Gets the message of this Pure1MetaWarning.  # noqa: E501

        Description of the warning  # noqa: E501

        :return: The message of this Pure1MetaWarning.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Pure1MetaWarning.

        Description of the warning  # noqa: E501

        :param message: The message of this Pure1MetaWarning.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def warning_code(self):
        """Gets the warning_code of this Pure1MetaWarning.  # noqa: E501

        Unique code identifying the warning  # noqa: E501

        :return: The warning_code of this Pure1MetaWarning.  # noqa: E501
        :rtype: str
        """
        return self._warning_code

    @warning_code.setter
    def warning_code(self, warning_code):
        """Sets the warning_code of this Pure1MetaWarning.

        Unique code identifying the warning  # noqa: E501

        :param warning_code: The warning_code of this Pure1MetaWarning.  # noqa: E501
        :type: str
        """

        self._warning_code = warning_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pure1MetaWarning, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pure1MetaWarning):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
