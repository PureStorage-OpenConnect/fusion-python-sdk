# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from fusion.models.resource_metadata import ResourceMetadata  # noqa: F401,E501

class RoleAssignment(ResourceMetadata):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role': 'RoleRef',
        'scope': 'ResourceReference',
        'principal': 'str'
    }
    if hasattr(ResourceMetadata, "swagger_types"):
        swagger_types.update(ResourceMetadata.swagger_types)

    attribute_map = {
        'role': 'role',
        'scope': 'scope',
        'principal': 'principal'
    }
    if hasattr(ResourceMetadata, "attribute_map"):
        attribute_map.update(ResourceMetadata.attribute_map)

    def __init__(self, role=None, scope=None, principal=None, *args, **kwargs):  # noqa: E501
        """RoleAssignment - a model defined in Swagger"""  # noqa: E501
        self._role = None
        self._scope = None
        self._principal = None
        self.discriminator = None
        self.role = role
        self.scope = scope
        self.principal = principal
        ResourceMetadata.__init__(self, *args, **kwargs)

    @property
    def role(self):
        """Gets the role of this RoleAssignment.  # noqa: E501


        :return: The role of this RoleAssignment.  # noqa: E501
        :rtype: RoleRef
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RoleAssignment.


        :param role: The role of this RoleAssignment.  # noqa: E501
        :type: RoleRef
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def scope(self):
        """Gets the scope of this RoleAssignment.  # noqa: E501


        :return: The scope of this RoleAssignment.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this RoleAssignment.


        :param scope: The scope of this RoleAssignment.  # noqa: E501
        :type: ResourceReference
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def principal(self):
        """Gets the principal of this RoleAssignment.  # noqa: E501

        The unique id of the principal (User or API Client) assigned to the role.  # noqa: E501

        :return: The principal of this RoleAssignment.  # noqa: E501
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this RoleAssignment.

        The unique id of the principal (User or API Client) assigned to the role.  # noqa: E501

        :param principal: The principal of this RoleAssignment.  # noqa: E501
        :type: str
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")  # noqa: E501

        self._principal = principal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoleAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleAssignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
