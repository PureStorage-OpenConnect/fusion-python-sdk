# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from fusion.models.resource_post import ResourcePost  # noqa: F401,E501

class PlacementRecommendationPost(ResourcePost):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'placement_group_link': 'str',
        'placement_group': 'str',
        'tenant': 'str',
        'tenant_space': 'str',
        'placement_engine': 'PlacementEngine',
        'simulated_placement': 'SimulatedPlacementPost',
        'target_arrays': 'list[str]'
    }
    if hasattr(ResourcePost, "swagger_types"):
        swagger_types.update(ResourcePost.swagger_types)

    attribute_map = {
        'placement_group_link': 'placement_group_link',
        'placement_group': 'placement_group',
        'tenant': 'tenant',
        'tenant_space': 'tenant_space',
        'placement_engine': 'placement_engine',
        'simulated_placement': 'simulated_placement',
        'target_arrays': 'target_arrays'
    }
    if hasattr(ResourcePost, "attribute_map"):
        attribute_map.update(ResourcePost.attribute_map)

    def __init__(self, placement_group_link=None, placement_group=None, tenant=None, tenant_space=None, placement_engine=None, simulated_placement=None, target_arrays=None, *args, **kwargs):  # noqa: E501
        """PlacementRecommendationPost - a model defined in Swagger"""  # noqa: E501
        self._placement_group_link = None
        self._placement_group = None
        self._tenant = None
        self._tenant_space = None
        self._placement_engine = None
        self._simulated_placement = None
        self._target_arrays = None
        self.discriminator = None
        if placement_group_link is not None:
            self.placement_group_link = placement_group_link
        if placement_group is not None:
            self.placement_group = placement_group
        self.tenant = tenant
        self.tenant_space = tenant_space
        if placement_engine is not None:
            self.placement_engine = placement_engine
        if simulated_placement is not None:
            self.simulated_placement = simulated_placement
        if target_arrays is not None:
            self.target_arrays = target_arrays
        ResourcePost.__init__(self, *args, **kwargs)

    @property
    def placement_group_link(self):
        """Gets the placement_group_link of this PlacementRecommendationPost.  # noqa: E501

        Deprecated. Use placement_group instead. The link to the placement group that we would like to generate a placement recommendation report on  # noqa: E501

        :return: The placement_group_link of this PlacementRecommendationPost.  # noqa: E501
        :rtype: str
        """
        return self._placement_group_link

    @placement_group_link.setter
    def placement_group_link(self, placement_group_link):
        """Sets the placement_group_link of this PlacementRecommendationPost.

        Deprecated. Use placement_group instead. The link to the placement group that we would like to generate a placement recommendation report on  # noqa: E501

        :param placement_group_link: The placement_group_link of this PlacementRecommendationPost.  # noqa: E501
        :type: str
        """

        self._placement_group_link = placement_group_link

    @property
    def placement_group(self):
        """Gets the placement_group of this PlacementRecommendationPost.  # noqa: E501

        Placement Group you would like to generate a placement recommendation report on. For placement of new placement group, leave this blank, and instead fill in simulated_placement  # noqa: E501

        :return: The placement_group of this PlacementRecommendationPost.  # noqa: E501
        :rtype: str
        """
        return self._placement_group

    @placement_group.setter
    def placement_group(self, placement_group):
        """Sets the placement_group of this PlacementRecommendationPost.

        Placement Group you would like to generate a placement recommendation report on. For placement of new placement group, leave this blank, and instead fill in simulated_placement  # noqa: E501

        :param placement_group: The placement_group of this PlacementRecommendationPost.  # noqa: E501
        :type: str
        """

        self._placement_group = placement_group

    @property
    def tenant(self):
        """Gets the tenant of this PlacementRecommendationPost.  # noqa: E501

        Tenant that Placement Group belongs to. For placement of new placement group, enter Tenant where the Placement Group would have been created in  # noqa: E501

        :return: The tenant of this PlacementRecommendationPost.  # noqa: E501
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this PlacementRecommendationPost.

        Tenant that Placement Group belongs to. For placement of new placement group, enter Tenant where the Placement Group would have been created in  # noqa: E501

        :param tenant: The tenant of this PlacementRecommendationPost.  # noqa: E501
        :type: str
        """
        if tenant is None:
            raise ValueError("Invalid value for `tenant`, must not be `None`")  # noqa: E501

        self._tenant = tenant

    @property
    def tenant_space(self):
        """Gets the tenant_space of this PlacementRecommendationPost.  # noqa: E501

        Tenant Space that Placement Group belongs to. For placement of new placement group, enter TenantSpace where Placement Group would have been created in  # noqa: E501

        :return: The tenant_space of this PlacementRecommendationPost.  # noqa: E501
        :rtype: str
        """
        return self._tenant_space

    @tenant_space.setter
    def tenant_space(self, tenant_space):
        """Sets the tenant_space of this PlacementRecommendationPost.

        Tenant Space that Placement Group belongs to. For placement of new placement group, enter TenantSpace where Placement Group would have been created in  # noqa: E501

        :param tenant_space: The tenant_space of this PlacementRecommendationPost.  # noqa: E501
        :type: str
        """
        if tenant_space is None:
            raise ValueError("Invalid value for `tenant_space`, must not be `None`")  # noqa: E501

        self._tenant_space = tenant_space

    @property
    def placement_engine(self):
        """Gets the placement_engine of this PlacementRecommendationPost.  # noqa: E501


        :return: The placement_engine of this PlacementRecommendationPost.  # noqa: E501
        :rtype: PlacementEngine
        """
        return self._placement_engine

    @placement_engine.setter
    def placement_engine(self, placement_engine):
        """Sets the placement_engine of this PlacementRecommendationPost.


        :param placement_engine: The placement_engine of this PlacementRecommendationPost.  # noqa: E501
        :type: PlacementEngine
        """

        self._placement_engine = placement_engine

    @property
    def simulated_placement(self):
        """Gets the simulated_placement of this PlacementRecommendationPost.  # noqa: E501


        :return: The simulated_placement of this PlacementRecommendationPost.  # noqa: E501
        :rtype: SimulatedPlacementPost
        """
        return self._simulated_placement

    @simulated_placement.setter
    def simulated_placement(self, simulated_placement):
        """Sets the simulated_placement of this PlacementRecommendationPost.


        :param simulated_placement: The simulated_placement of this PlacementRecommendationPost.  # noqa: E501
        :type: SimulatedPlacementPost
        """

        self._simulated_placement = simulated_placement

    @property
    def target_arrays(self):
        """Gets the target_arrays of this PlacementRecommendationPost.  # noqa: E501

        Optional argument. If provided, specify a list of array names to constraint the list of arrays under consideration for placement recommendations  # noqa: E501

        :return: The target_arrays of this PlacementRecommendationPost.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_arrays

    @target_arrays.setter
    def target_arrays(self, target_arrays):
        """Sets the target_arrays of this PlacementRecommendationPost.

        Optional argument. If provided, specify a list of array names to constraint the list of arrays under consideration for placement recommendations  # noqa: E501

        :param target_arrays: The target_arrays of this PlacementRecommendationPost.  # noqa: E501
        :type: list[str]
        """

        self._target_arrays = target_arrays

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlacementRecommendationPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlacementRecommendationPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
