# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from fusion.models.resource_patch import ResourcePatch  # noqa: F401,E501

class ArrayPatch(ResourcePatch):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_name': 'NullableString',
        'maintenance_mode': 'NullableBoolean',
        'unavailable_mode': 'NullableBoolean'
    }
    if hasattr(ResourcePatch, "swagger_types"):
        swagger_types.update(ResourcePatch.swagger_types)

    attribute_map = {
        'host_name': 'host_name',
        'maintenance_mode': 'maintenance_mode',
        'unavailable_mode': 'unavailable_mode'
    }
    if hasattr(ResourcePatch, "attribute_map"):
        attribute_map.update(ResourcePatch.attribute_map)

    def __init__(self, host_name=None, maintenance_mode=None, unavailable_mode=None, *args, **kwargs):  # noqa: E501
        """ArrayPatch - a model defined in Swagger"""  # noqa: E501
        self._host_name = None
        self._maintenance_mode = None
        self._unavailable_mode = None
        self.discriminator = None
        if host_name is not None:
            self.host_name = host_name
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if unavailable_mode is not None:
            self.unavailable_mode = unavailable_mode
        ResourcePatch.__init__(self, *args, **kwargs)

    @property
    def host_name(self):
        """Gets the host_name of this ArrayPatch.  # noqa: E501


        :return: The host_name of this ArrayPatch.  # noqa: E501
        :rtype: NullableString
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this ArrayPatch.


        :param host_name: The host_name of this ArrayPatch.  # noqa: E501
        :type: NullableString
        """

        self._host_name = host_name

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this ArrayPatch.  # noqa: E501


        :return: The maintenance_mode of this ArrayPatch.  # noqa: E501
        :rtype: NullableBoolean
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this ArrayPatch.


        :param maintenance_mode: The maintenance_mode of this ArrayPatch.  # noqa: E501
        :type: NullableBoolean
        """

        self._maintenance_mode = maintenance_mode

    @property
    def unavailable_mode(self):
        """Gets the unavailable_mode of this ArrayPatch.  # noqa: E501


        :return: The unavailable_mode of this ArrayPatch.  # noqa: E501
        :rtype: NullableBoolean
        """
        return self._unavailable_mode

    @unavailable_mode.setter
    def unavailable_mode(self, unavailable_mode):
        """Sets the unavailable_mode of this ArrayPatch.


        :param unavailable_mode: The unavailable_mode of this ArrayPatch.  # noqa: E501
        :type: NullableBoolean
        """

        self._unavailable_mode = unavailable_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArrayPatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrayPatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
