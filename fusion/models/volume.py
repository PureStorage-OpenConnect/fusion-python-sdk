# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from fusion.models.resource_metadata import ResourceMetadata  # noqa: F401,E501

class Volume(ResourceMetadata):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'size': 'int',
        'tenant': 'TenantRef',
        'tenant_space': 'TenantSpaceRef',
        'storage_class': 'StorageClassRef',
        'protection_policy': 'ProtectionPolicyRef',
        'placement_group': 'PlacementGroupRef',
        'array': 'ArrayRef',
        'created_at': 'int',
        'source_volume_snapshot': 'VolumeSnapshotRef',
        'source': 'ResourceReference',
        'host_access_policies': 'list[HostAccessPolicyRef]',
        'serial_number': 'str',
        'target': 'Target',
        'time_remaining': 'int',
        'destroyed': 'bool'
    }
    if hasattr(ResourceMetadata, "swagger_types"):
        swagger_types.update(ResourceMetadata.swagger_types)

    attribute_map = {
        'size': 'size',
        'tenant': 'tenant',
        'tenant_space': 'tenant_space',
        'storage_class': 'storage_class',
        'protection_policy': 'protection_policy',
        'placement_group': 'placement_group',
        'array': 'array',
        'created_at': 'created_at',
        'source_volume_snapshot': 'source_volume_snapshot',
        'source': 'source',
        'host_access_policies': 'host_access_policies',
        'serial_number': 'serial_number',
        'target': 'target',
        'time_remaining': 'time_remaining',
        'destroyed': 'destroyed'
    }
    if hasattr(ResourceMetadata, "attribute_map"):
        attribute_map.update(ResourceMetadata.attribute_map)

    def __init__(self, size=None, tenant=None, tenant_space=None, storage_class=None, protection_policy=None, placement_group=None, array=None, created_at=None, source_volume_snapshot=None, source=None, host_access_policies=None, serial_number=None, target=None, time_remaining=None, destroyed=None, *args, **kwargs):  # noqa: E501
        """Volume - a model defined in Swagger"""  # noqa: E501
        self._size = None
        self._tenant = None
        self._tenant_space = None
        self._storage_class = None
        self._protection_policy = None
        self._placement_group = None
        self._array = None
        self._created_at = None
        self._source_volume_snapshot = None
        self._source = None
        self._host_access_policies = None
        self._serial_number = None
        self._target = None
        self._time_remaining = None
        self._destroyed = None
        self.discriminator = None
        if size is not None:
            self.size = size
        self.tenant = tenant
        self.tenant_space = tenant_space
        self.storage_class = storage_class
        if protection_policy is not None:
            self.protection_policy = protection_policy
        if placement_group is not None:
            self.placement_group = placement_group
        if array is not None:
            self.array = array
        if created_at is not None:
            self.created_at = created_at
        if source_volume_snapshot is not None:
            self.source_volume_snapshot = source_volume_snapshot
        if source is not None:
            self.source = source
        if host_access_policies is not None:
            self.host_access_policies = host_access_policies
        self.serial_number = serial_number
        if target is not None:
            self.target = target
        if time_remaining is not None:
            self.time_remaining = time_remaining
        if destroyed is not None:
            self.destroyed = destroyed
        ResourceMetadata.__init__(self, *args, **kwargs)

    @property
    def size(self):
        """Gets the size of this Volume.  # noqa: E501

        The size of the volume  # noqa: E501

        :return: The size of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Volume.

        The size of the volume  # noqa: E501

        :param size: The size of this Volume.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def tenant(self):
        """Gets the tenant of this Volume.  # noqa: E501


        :return: The tenant of this Volume.  # noqa: E501
        :rtype: TenantRef
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this Volume.


        :param tenant: The tenant of this Volume.  # noqa: E501
        :type: TenantRef
        """
        if tenant is None:
            raise ValueError("Invalid value for `tenant`, must not be `None`")  # noqa: E501

        self._tenant = tenant

    @property
    def tenant_space(self):
        """Gets the tenant_space of this Volume.  # noqa: E501


        :return: The tenant_space of this Volume.  # noqa: E501
        :rtype: TenantSpaceRef
        """
        return self._tenant_space

    @tenant_space.setter
    def tenant_space(self, tenant_space):
        """Sets the tenant_space of this Volume.


        :param tenant_space: The tenant_space of this Volume.  # noqa: E501
        :type: TenantSpaceRef
        """
        if tenant_space is None:
            raise ValueError("Invalid value for `tenant_space`, must not be `None`")  # noqa: E501

        self._tenant_space = tenant_space

    @property
    def storage_class(self):
        """Gets the storage_class of this Volume.  # noqa: E501


        :return: The storage_class of this Volume.  # noqa: E501
        :rtype: StorageClassRef
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this Volume.


        :param storage_class: The storage_class of this Volume.  # noqa: E501
        :type: StorageClassRef
        """
        if storage_class is None:
            raise ValueError("Invalid value for `storage_class`, must not be `None`")  # noqa: E501

        self._storage_class = storage_class

    @property
    def protection_policy(self):
        """Gets the protection_policy of this Volume.  # noqa: E501


        :return: The protection_policy of this Volume.  # noqa: E501
        :rtype: ProtectionPolicyRef
        """
        return self._protection_policy

    @protection_policy.setter
    def protection_policy(self, protection_policy):
        """Sets the protection_policy of this Volume.


        :param protection_policy: The protection_policy of this Volume.  # noqa: E501
        :type: ProtectionPolicyRef
        """

        self._protection_policy = protection_policy

    @property
    def placement_group(self):
        """Gets the placement_group of this Volume.  # noqa: E501


        :return: The placement_group of this Volume.  # noqa: E501
        :rtype: PlacementGroupRef
        """
        return self._placement_group

    @placement_group.setter
    def placement_group(self, placement_group):
        """Sets the placement_group of this Volume.


        :param placement_group: The placement_group of this Volume.  # noqa: E501
        :type: PlacementGroupRef
        """

        self._placement_group = placement_group

    @property
    def array(self):
        """Gets the array of this Volume.  # noqa: E501


        :return: The array of this Volume.  # noqa: E501
        :rtype: ArrayRef
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this Volume.


        :param array: The array of this Volume.  # noqa: E501
        :type: ArrayRef
        """

        self._array = array

    @property
    def created_at(self):
        """Gets the created_at of this Volume.  # noqa: E501


        :return: The created_at of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Volume.


        :param created_at: The created_at of this Volume.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def source_volume_snapshot(self):
        """Gets the source_volume_snapshot of this Volume.  # noqa: E501


        :return: The source_volume_snapshot of this Volume.  # noqa: E501
        :rtype: VolumeSnapshotRef
        """
        return self._source_volume_snapshot

    @source_volume_snapshot.setter
    def source_volume_snapshot(self, source_volume_snapshot):
        """Sets the source_volume_snapshot of this Volume.


        :param source_volume_snapshot: The source_volume_snapshot of this Volume.  # noqa: E501
        :type: VolumeSnapshotRef
        """

        self._source_volume_snapshot = source_volume_snapshot

    @property
    def source(self):
        """Gets the source of this Volume.  # noqa: E501


        :return: The source of this Volume.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Volume.


        :param source: The source of this Volume.  # noqa: E501
        :type: ResourceReference
        """

        self._source = source

    @property
    def host_access_policies(self):
        """Gets the host_access_policies of this Volume.  # noqa: E501


        :return: The host_access_policies of this Volume.  # noqa: E501
        :rtype: list[HostAccessPolicyRef]
        """
        return self._host_access_policies

    @host_access_policies.setter
    def host_access_policies(self, host_access_policies):
        """Sets the host_access_policies of this Volume.


        :param host_access_policies: The host_access_policies of this Volume.  # noqa: E501
        :type: list[HostAccessPolicyRef]
        """

        self._host_access_policies = host_access_policies

    @property
    def serial_number(self):
        """Gets the serial_number of this Volume.  # noqa: E501

        Volume Serial Numbers, aka LUN Serial Numbers. This will be visible to initiators that connect to the volume.  # noqa: E501

        :return: The serial_number of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Volume.

        Volume Serial Numbers, aka LUN Serial Numbers. This will be visible to initiators that connect to the volume.  # noqa: E501

        :param serial_number: The serial_number of this Volume.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def target(self):
        """Gets the target of this Volume.  # noqa: E501


        :return: The target of this Volume.  # noqa: E501
        :rtype: Target
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Volume.


        :param target: The target of this Volume.  # noqa: E501
        :type: Target
        """

        self._target = target

    @property
    def time_remaining(self):
        """Gets the time_remaining of this Volume.  # noqa: E501

        The amount of time left until the destroyed volume is permanently eradicated. Only valid when destroyed is true. Measured in milliseconds. Before the time_remaining period has elapsed, the destroyed volume can be recovered by setting destroyed=false. An expired but not yet eradicated volume has destroyed=true and time_remaining=0.  # noqa: E501

        :return: The time_remaining of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._time_remaining

    @time_remaining.setter
    def time_remaining(self, time_remaining):
        """Sets the time_remaining of this Volume.

        The amount of time left until the destroyed volume is permanently eradicated. Only valid when destroyed is true. Measured in milliseconds. Before the time_remaining period has elapsed, the destroyed volume can be recovered by setting destroyed=false. An expired but not yet eradicated volume has destroyed=true and time_remaining=0.  # noqa: E501

        :param time_remaining: The time_remaining of this Volume.  # noqa: E501
        :type: int
        """

        self._time_remaining = time_remaining

    @property
    def destroyed(self):
        """Gets the destroyed of this Volume.  # noqa: E501

        True if the volume has been destroyed and is pending eradication. The time_remaining value displays the amount of time left until the destroyed volume is permanently eradicated. Before the time_remaining period has elapsed, the destroyed volume can be recovered by setting destroyed=false. Once the time_remaining period has elapsed, the volume is permanently eradicated and can no longer be recovered.  # noqa: E501

        :return: The destroyed of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._destroyed

    @destroyed.setter
    def destroyed(self, destroyed):
        """Sets the destroyed of this Volume.

        True if the volume has been destroyed and is pending eradication. The time_remaining value displays the amount of time left until the destroyed volume is permanently eradicated. Before the time_remaining period has elapsed, the destroyed volume can be recovered by setting destroyed=false. Once the time_remaining period has elapsed, the volume is permanently eradicated and can no longer be recovered.  # noqa: E501

        :param destroyed: The destroyed of this Volume.  # noqa: E501
        :type: bool
        """

        self._destroyed = destroyed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Volume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Volume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
