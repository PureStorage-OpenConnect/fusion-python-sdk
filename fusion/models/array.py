# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from fusion.models.resource_metadata import ResourceMetadata  # noqa: F401,E501

class Array(ResourceMetadata):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apartment_id': 'str',
        'hardware_type': 'HardwareTypeRef',
        'region': 'RegionRef',
        'availability_zone': 'AvailabilityZoneRef',
        'appliance_id': 'str',
        'host_name': 'str',
        'maintenance_mode': 'bool',
        'unavailable_mode': 'bool'
    }
    if hasattr(ResourceMetadata, "swagger_types"):
        swagger_types.update(ResourceMetadata.swagger_types)

    attribute_map = {
        'apartment_id': 'apartment_id',
        'hardware_type': 'hardware_type',
        'region': 'region',
        'availability_zone': 'availability_zone',
        'appliance_id': 'appliance_id',
        'host_name': 'host_name',
        'maintenance_mode': 'maintenance_mode',
        'unavailable_mode': 'unavailable_mode'
    }
    if hasattr(ResourceMetadata, "attribute_map"):
        attribute_map.update(ResourceMetadata.attribute_map)

    def __init__(self, apartment_id=None, hardware_type=None, region=None, availability_zone=None, appliance_id=None, host_name=None, maintenance_mode=None, unavailable_mode=None, *args, **kwargs):  # noqa: E501
        """Array - a model defined in Swagger"""  # noqa: E501
        self._apartment_id = None
        self._hardware_type = None
        self._region = None
        self._availability_zone = None
        self._appliance_id = None
        self._host_name = None
        self._maintenance_mode = None
        self._unavailable_mode = None
        self.discriminator = None
        self.apartment_id = apartment_id
        if hardware_type is not None:
            self.hardware_type = hardware_type
        if region is not None:
            self.region = region
        self.availability_zone = availability_zone
        self.appliance_id = appliance_id
        self.host_name = host_name
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if unavailable_mode is not None:
            self.unavailable_mode = unavailable_mode
        ResourceMetadata.__init__(self, *args, **kwargs)

    @property
    def apartment_id(self):
        """Gets the apartment_id of this Array.  # noqa: E501

        Apartment identifier of Array. Return value of purearray list  # noqa: E501

        :return: The apartment_id of this Array.  # noqa: E501
        :rtype: str
        """
        return self._apartment_id

    @apartment_id.setter
    def apartment_id(self, apartment_id):
        """Sets the apartment_id of this Array.

        Apartment identifier of Array. Return value of purearray list  # noqa: E501

        :param apartment_id: The apartment_id of this Array.  # noqa: E501
        :type: str
        """
        if apartment_id is None:
            raise ValueError("Invalid value for `apartment_id`, must not be `None`")  # noqa: E501

        self._apartment_id = apartment_id

    @property
    def hardware_type(self):
        """Gets the hardware_type of this Array.  # noqa: E501


        :return: The hardware_type of this Array.  # noqa: E501
        :rtype: HardwareTypeRef
        """
        return self._hardware_type

    @hardware_type.setter
    def hardware_type(self, hardware_type):
        """Sets the hardware_type of this Array.


        :param hardware_type: The hardware_type of this Array.  # noqa: E501
        :type: HardwareTypeRef
        """

        self._hardware_type = hardware_type

    @property
    def region(self):
        """Gets the region of this Array.  # noqa: E501


        :return: The region of this Array.  # noqa: E501
        :rtype: RegionRef
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Array.


        :param region: The region of this Array.  # noqa: E501
        :type: RegionRef
        """

        self._region = region

    @property
    def availability_zone(self):
        """Gets the availability_zone of this Array.  # noqa: E501


        :return: The availability_zone of this Array.  # noqa: E501
        :rtype: AvailabilityZoneRef
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this Array.


        :param availability_zone: The availability_zone of this Array.  # noqa: E501
        :type: AvailabilityZoneRef
        """
        if availability_zone is None:
            raise ValueError("Invalid value for `availability_zone`, must not be `None`")  # noqa: E501

        self._availability_zone = availability_zone

    @property
    def appliance_id(self):
        """Gets the appliance_id of this Array.  # noqa: E501

        The Appliance id of the array.  # noqa: E501

        :return: The appliance_id of this Array.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this Array.

        The Appliance id of the array.  # noqa: E501

        :param appliance_id: The appliance_id of this Array.  # noqa: E501
        :type: str
        """
        if appliance_id is None:
            raise ValueError("Invalid value for `appliance_id`, must not be `None`")  # noqa: E501

        self._appliance_id = appliance_id

    @property
    def host_name(self):
        """Gets the host_name of this Array.  # noqa: E501

        The host name of the array. This should resolve to the management address of the array. If DNS is not available, provide the management address directly.  # noqa: E501

        :return: The host_name of this Array.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this Array.

        The host name of the array. This should resolve to the management address of the array. If DNS is not available, provide the management address directly.  # noqa: E501

        :param host_name: The host_name of this Array.  # noqa: E501
        :type: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")  # noqa: E501

        self._host_name = host_name

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this Array.  # noqa: E501

        The flag to indicate whether the array is ready to use or not. True if not ready.  # noqa: E501

        :return: The maintenance_mode of this Array.  # noqa: E501
        :rtype: bool
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this Array.

        The flag to indicate whether the array is ready to use or not. True if not ready.  # noqa: E501

        :param maintenance_mode: The maintenance_mode of this Array.  # noqa: E501
        :type: bool
        """

        self._maintenance_mode = maintenance_mode

    @property
    def unavailable_mode(self):
        """Gets the unavailable_mode of this Array.  # noqa: E501

        The flag to indicate whether the array is unavaialble/unhealthy. True if unavailable.  # noqa: E501

        :return: The unavailable_mode of this Array.  # noqa: E501
        :rtype: bool
        """
        return self._unavailable_mode

    @unavailable_mode.setter
    def unavailable_mode(self, unavailable_mode):
        """Sets the unavailable_mode of this Array.

        The flag to indicate whether the array is unavaialble/unhealthy. True if unavailable.  # noqa: E501

        :param unavailable_mode: The unavailable_mode of this Array.  # noqa: E501
        :type: bool
        """

        self._unavailable_mode = unavailable_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Array, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Array):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
