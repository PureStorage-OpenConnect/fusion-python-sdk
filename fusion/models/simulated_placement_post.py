# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimulatedPlacementPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'availability_zone': 'str',
        'region': 'str',
        'storage_service': 'str'
    }

    attribute_map = {
        'availability_zone': 'availability_zone',
        'region': 'region',
        'storage_service': 'storage_service'
    }

    def __init__(self, availability_zone=None, region=None, storage_service=None):  # noqa: E501
        """SimulatedPlacementPost - a model defined in Swagger"""  # noqa: E501
        self._availability_zone = None
        self._region = None
        self._storage_service = None
        self.discriminator = None
        self.availability_zone = availability_zone
        self.region = region
        self.storage_service = storage_service

    @property
    def availability_zone(self):
        """Gets the availability_zone of this SimulatedPlacementPost.  # noqa: E501

        If Placement Group would have been created, which Availability Zone would it be created in  # noqa: E501

        :return: The availability_zone of this SimulatedPlacementPost.  # noqa: E501
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this SimulatedPlacementPost.

        If Placement Group would have been created, which Availability Zone would it be created in  # noqa: E501

        :param availability_zone: The availability_zone of this SimulatedPlacementPost.  # noqa: E501
        :type: str
        """
        if availability_zone is None:
            raise ValueError("Invalid value for `availability_zone`, must not be `None`")  # noqa: E501

        self._availability_zone = availability_zone

    @property
    def region(self):
        """Gets the region of this SimulatedPlacementPost.  # noqa: E501

        If Placement Group would have been created, which Region would it be created in  # noqa: E501

        :return: The region of this SimulatedPlacementPost.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SimulatedPlacementPost.

        If Placement Group would have been created, which Region would it be created in  # noqa: E501

        :param region: The region of this SimulatedPlacementPost.  # noqa: E501
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def storage_service(self):
        """Gets the storage_service of this SimulatedPlacementPost.  # noqa: E501

        If Placement Group would have been created, which Storage Service would it be assigned  # noqa: E501

        :return: The storage_service of this SimulatedPlacementPost.  # noqa: E501
        :rtype: str
        """
        return self._storage_service

    @storage_service.setter
    def storage_service(self, storage_service):
        """Sets the storage_service of this SimulatedPlacementPost.

        If Placement Group would have been created, which Storage Service would it be assigned  # noqa: E501

        :param storage_service: The storage_service of this SimulatedPlacementPost.  # noqa: E501
        :type: str
        """
        if storage_service is None:
            raise ValueError("Invalid value for `storage_service`, must not be `None`")  # noqa: E501

        self._storage_service = storage_service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimulatedPlacementPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimulatedPlacementPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
