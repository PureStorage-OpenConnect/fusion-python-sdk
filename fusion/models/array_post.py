# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from fusion.models.resource_post import ResourcePost  # noqa: F401,E501

class ArrayPost(ResourcePost):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apartment_id': 'str',
        'host_name': 'str',
        'hardware_type': 'str',
        'appliance_id': 'str'
    }
    if hasattr(ResourcePost, "swagger_types"):
        swagger_types.update(ResourcePost.swagger_types)

    attribute_map = {
        'apartment_id': 'apartment_id',
        'host_name': 'host_name',
        'hardware_type': 'hardware_type',
        'appliance_id': 'appliance_id'
    }
    if hasattr(ResourcePost, "attribute_map"):
        attribute_map.update(ResourcePost.attribute_map)

    def __init__(self, apartment_id=None, host_name=None, hardware_type=None, appliance_id=None, *args, **kwargs):  # noqa: E501
        """ArrayPost - a model defined in Swagger"""  # noqa: E501
        self._apartment_id = None
        self._host_name = None
        self._hardware_type = None
        self._appliance_id = None
        self.discriminator = None
        if apartment_id is not None:
            self.apartment_id = apartment_id
        self.host_name = host_name
        self.hardware_type = hardware_type
        self.appliance_id = appliance_id
        ResourcePost.__init__(self, *args, **kwargs)

    @property
    def apartment_id(self):
        """Gets the apartment_id of this ArrayPost.  # noqa: E501

        Apartment Identifier of Array. Return value of purearray list  # noqa: E501

        :return: The apartment_id of this ArrayPost.  # noqa: E501
        :rtype: str
        """
        return self._apartment_id

    @apartment_id.setter
    def apartment_id(self, apartment_id):
        """Sets the apartment_id of this ArrayPost.

        Apartment Identifier of Array. Return value of purearray list  # noqa: E501

        :param apartment_id: The apartment_id of this ArrayPost.  # noqa: E501
        :type: str
        """

        self._apartment_id = apartment_id

    @property
    def host_name(self):
        """Gets the host_name of this ArrayPost.  # noqa: E501

        The host name of the array.  # noqa: E501

        :return: The host_name of this ArrayPost.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this ArrayPost.

        The host name of the array.  # noqa: E501

        :param host_name: The host_name of this ArrayPost.  # noqa: E501
        :type: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")  # noqa: E501

        self._host_name = host_name

    @property
    def hardware_type(self):
        """Gets the hardware_type of this ArrayPost.  # noqa: E501

        Name of the hardware type  # noqa: E501

        :return: The hardware_type of this ArrayPost.  # noqa: E501
        :rtype: str
        """
        return self._hardware_type

    @hardware_type.setter
    def hardware_type(self, hardware_type):
        """Sets the hardware_type of this ArrayPost.

        Name of the hardware type  # noqa: E501

        :param hardware_type: The hardware_type of this ArrayPost.  # noqa: E501
        :type: str
        """
        if hardware_type is None:
            raise ValueError("Invalid value for `hardware_type`, must not be `None`")  # noqa: E501

        self._hardware_type = hardware_type

    @property
    def appliance_id(self):
        """Gets the appliance_id of this ArrayPost.  # noqa: E501

        The Appliance id of the array.  # noqa: E501

        :return: The appliance_id of this ArrayPost.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this ArrayPost.

        The Appliance id of the array.  # noqa: E501

        :param appliance_id: The appliance_id of this ArrayPost.  # noqa: E501
        :type: str
        """
        if appliance_id is None:
            raise ValueError("Invalid value for `appliance_id`, must not be `None`")  # noqa: E501

        self._appliance_id = appliance_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArrayPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrayPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
