# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pure1MetaValueConfidenceInterval(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upper': 'float',
        'lower': 'float'
    }

    attribute_map = {
        'upper': 'upper',
        'lower': 'lower'
    }

    def __init__(self, upper=None, lower=None):  # noqa: E501
        """Pure1MetaValueConfidenceInterval - a model defined in Swagger"""  # noqa: E501
        self._upper = None
        self._lower = None
        self.discriminator = None
        if upper is not None:
            self.upper = upper
        if lower is not None:
            self.lower = lower

    @property
    def upper(self):
        """Gets the upper of this Pure1MetaValueConfidenceInterval.  # noqa: E501


        :return: The upper of this Pure1MetaValueConfidenceInterval.  # noqa: E501
        :rtype: float
        """
        return self._upper

    @upper.setter
    def upper(self, upper):
        """Sets the upper of this Pure1MetaValueConfidenceInterval.


        :param upper: The upper of this Pure1MetaValueConfidenceInterval.  # noqa: E501
        :type: float
        """

        self._upper = upper

    @property
    def lower(self):
        """Gets the lower of this Pure1MetaValueConfidenceInterval.  # noqa: E501


        :return: The lower of this Pure1MetaValueConfidenceInterval.  # noqa: E501
        :rtype: float
        """
        return self._lower

    @lower.setter
    def lower(self, lower):
        """Sets the lower of this Pure1MetaValueConfidenceInterval.


        :param lower: The lower of this Pure1MetaValueConfidenceInterval.  # noqa: E501
        :type: float
        """

        self._lower = lower

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pure1MetaValueConfidenceInterval, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pure1MetaValueConfidenceInterval):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
