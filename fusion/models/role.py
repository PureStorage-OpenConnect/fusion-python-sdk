# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from fusion.models.resource_metadata import ResourceMetadata  # noqa: F401,E501

class Role(ResourceMetadata):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'assignable_scopes': 'list[str]'
    }
    if hasattr(ResourceMetadata, "swagger_types"):
        swagger_types.update(ResourceMetadata.swagger_types)

    attribute_map = {
        'description': 'description',
        'assignable_scopes': 'assignable_scopes'
    }
    if hasattr(ResourceMetadata, "attribute_map"):
        attribute_map.update(ResourceMetadata.attribute_map)

    def __init__(self, description=None, assignable_scopes=None, *args, **kwargs):  # noqa: E501
        """Role - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._assignable_scopes = None
        self.discriminator = None
        self.description = description
        self.assignable_scopes = assignable_scopes
        ResourceMetadata.__init__(self, *args, **kwargs)

    @property
    def description(self):
        """Gets the description of this Role.  # noqa: E501

        A description of the role's capabilities.  # noqa: E501

        :return: The description of this Role.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Role.

        A description of the role's capabilities.  # noqa: E501

        :param description: The description of this Role.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def assignable_scopes(self):
        """Gets the assignable_scopes of this Role.  # noqa: E501

        A list of resource kinds the role can be scoped to.  # noqa: E501

        :return: The assignable_scopes of this Role.  # noqa: E501
        :rtype: list[str]
        """
        return self._assignable_scopes

    @assignable_scopes.setter
    def assignable_scopes(self, assignable_scopes):
        """Sets the assignable_scopes of this Role.

        A list of resource kinds the role can be scoped to.  # noqa: E501

        :param assignable_scopes: The assignable_scopes of this Role.  # noqa: E501
        :type: list[str]
        """
        if assignable_scopes is None:
            raise ValueError("Invalid value for `assignable_scopes`, must not be `None`")  # noqa: E501

        self._assignable_scopes = assignable_scopes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Role, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Role):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
