# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Performance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource': 'ResourceReference',
        'reads_per_sec': 'int',
        'read_latency_us': 'int',
        'read_bandwidth': 'int',
        'writes_per_sec': 'int',
        'write_latency_us': 'int',
        'write_bandwidth': 'int'
    }

    attribute_map = {
        'resource': 'resource',
        'reads_per_sec': 'reads_per_sec',
        'read_latency_us': 'read_latency_us',
        'read_bandwidth': 'read_bandwidth',
        'writes_per_sec': 'writes_per_sec',
        'write_latency_us': 'write_latency_us',
        'write_bandwidth': 'write_bandwidth'
    }

    def __init__(self, resource=None, reads_per_sec=None, read_latency_us=None, read_bandwidth=None, writes_per_sec=None, write_latency_us=None, write_bandwidth=None):  # noqa: E501
        """Performance - a model defined in Swagger"""  # noqa: E501
        self._resource = None
        self._reads_per_sec = None
        self._read_latency_us = None
        self._read_bandwidth = None
        self._writes_per_sec = None
        self._write_latency_us = None
        self._write_bandwidth = None
        self.discriminator = None
        if resource is not None:
            self.resource = resource
        if reads_per_sec is not None:
            self.reads_per_sec = reads_per_sec
        if read_latency_us is not None:
            self.read_latency_us = read_latency_us
        if read_bandwidth is not None:
            self.read_bandwidth = read_bandwidth
        if writes_per_sec is not None:
            self.writes_per_sec = writes_per_sec
        if write_latency_us is not None:
            self.write_latency_us = write_latency_us
        if write_bandwidth is not None:
            self.write_bandwidth = write_bandwidth

    @property
    def resource(self):
        """Gets the resource of this Performance.  # noqa: E501


        :return: The resource of this Performance.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Performance.


        :param resource: The resource of this Performance.  # noqa: E501
        :type: ResourceReference
        """

        self._resource = resource

    @property
    def reads_per_sec(self):
        """Gets the reads_per_sec of this Performance.  # noqa: E501

        Reads per second  # noqa: E501

        :return: The reads_per_sec of this Performance.  # noqa: E501
        :rtype: int
        """
        return self._reads_per_sec

    @reads_per_sec.setter
    def reads_per_sec(self, reads_per_sec):
        """Sets the reads_per_sec of this Performance.

        Reads per second  # noqa: E501

        :param reads_per_sec: The reads_per_sec of this Performance.  # noqa: E501
        :type: int
        """

        self._reads_per_sec = reads_per_sec

    @property
    def read_latency_us(self):
        """Gets the read_latency_us of this Performance.  # noqa: E501

        Read Latency in microseconds  # noqa: E501

        :return: The read_latency_us of this Performance.  # noqa: E501
        :rtype: int
        """
        return self._read_latency_us

    @read_latency_us.setter
    def read_latency_us(self, read_latency_us):
        """Sets the read_latency_us of this Performance.

        Read Latency in microseconds  # noqa: E501

        :param read_latency_us: The read_latency_us of this Performance.  # noqa: E501
        :type: int
        """

        self._read_latency_us = read_latency_us

    @property
    def read_bandwidth(self):
        """Gets the read_bandwidth of this Performance.  # noqa: E501

        Read Bandwidth in bytes per second  # noqa: E501

        :return: The read_bandwidth of this Performance.  # noqa: E501
        :rtype: int
        """
        return self._read_bandwidth

    @read_bandwidth.setter
    def read_bandwidth(self, read_bandwidth):
        """Sets the read_bandwidth of this Performance.

        Read Bandwidth in bytes per second  # noqa: E501

        :param read_bandwidth: The read_bandwidth of this Performance.  # noqa: E501
        :type: int
        """

        self._read_bandwidth = read_bandwidth

    @property
    def writes_per_sec(self):
        """Gets the writes_per_sec of this Performance.  # noqa: E501

        Writes per second  # noqa: E501

        :return: The writes_per_sec of this Performance.  # noqa: E501
        :rtype: int
        """
        return self._writes_per_sec

    @writes_per_sec.setter
    def writes_per_sec(self, writes_per_sec):
        """Sets the writes_per_sec of this Performance.

        Writes per second  # noqa: E501

        :param writes_per_sec: The writes_per_sec of this Performance.  # noqa: E501
        :type: int
        """

        self._writes_per_sec = writes_per_sec

    @property
    def write_latency_us(self):
        """Gets the write_latency_us of this Performance.  # noqa: E501

        Write Latency in microseconds  # noqa: E501

        :return: The write_latency_us of this Performance.  # noqa: E501
        :rtype: int
        """
        return self._write_latency_us

    @write_latency_us.setter
    def write_latency_us(self, write_latency_us):
        """Sets the write_latency_us of this Performance.

        Write Latency in microseconds  # noqa: E501

        :param write_latency_us: The write_latency_us of this Performance.  # noqa: E501
        :type: int
        """

        self._write_latency_us = write_latency_us

    @property
    def write_bandwidth(self):
        """Gets the write_bandwidth of this Performance.  # noqa: E501

        Write Bandwidth in bytes per second  # noqa: E501

        :return: The write_bandwidth of this Performance.  # noqa: E501
        :rtype: int
        """
        return self._write_bandwidth

    @write_bandwidth.setter
    def write_bandwidth(self, write_bandwidth):
        """Sets the write_bandwidth of this Performance.

        Write Bandwidth in bytes per second  # noqa: E501

        :param write_bandwidth: The write_bandwidth of this Performance.  # noqa: E501
        :type: int
        """

        self._write_bandwidth = write_bandwidth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Performance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Performance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
