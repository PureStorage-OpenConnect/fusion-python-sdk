# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pure1MetaPlacementRecommendation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'raw': 'str',
        'objectives': 'Pure1MetaPlacementRecommendationObjectives',
        'load_values': 'Pure1MetaPlacementRecommendationLoadValues',
        'capacity_values': 'list[Pure1MetaValue]',
        'days_to_reach_90_percent_capacity': 'float',
        'days_to_reach_100_percent_capacity': 'float',
        'error': 'str',
        'warnings': 'list[Pure1MetaWarning]'
    }

    attribute_map = {
        'raw': 'raw',
        'objectives': 'objectives',
        'load_values': 'load_values',
        'capacity_values': 'capacity_values',
        'days_to_reach_90_percent_capacity': 'days_to_reach_90_percent_capacity',
        'days_to_reach_100_percent_capacity': 'days_to_reach_100_percent_capacity',
        'error': 'error',
        'warnings': 'warnings'
    }

    def __init__(self, raw=None, objectives=None, load_values=None, capacity_values=None, days_to_reach_90_percent_capacity=None, days_to_reach_100_percent_capacity=None, error=None, warnings=None):  # noqa: E501
        """Pure1MetaPlacementRecommendation - a model defined in Swagger"""  # noqa: E501
        self._raw = None
        self._objectives = None
        self._load_values = None
        self._capacity_values = None
        self._days_to_reach_90_percent_capacity = None
        self._days_to_reach_100_percent_capacity = None
        self._error = None
        self._warnings = None
        self.discriminator = None
        if raw is not None:
            self.raw = raw
        if objectives is not None:
            self.objectives = objectives
        if load_values is not None:
            self.load_values = load_values
        if capacity_values is not None:
            self.capacity_values = capacity_values
        if days_to_reach_90_percent_capacity is not None:
            self.days_to_reach_90_percent_capacity = days_to_reach_90_percent_capacity
        if days_to_reach_100_percent_capacity is not None:
            self.days_to_reach_100_percent_capacity = days_to_reach_100_percent_capacity
        if error is not None:
            self.error = error
        if warnings is not None:
            self.warnings = warnings

    @property
    def raw(self):
        """Gets the raw of this Pure1MetaPlacementRecommendation.  # noqa: E501

        Raw output from Pure1 Meta Recommendation engine in JSON string format  # noqa: E501

        :return: The raw of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :rtype: str
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this Pure1MetaPlacementRecommendation.

        Raw output from Pure1 Meta Recommendation engine in JSON string format  # noqa: E501

        :param raw: The raw of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :type: str
        """

        self._raw = raw

    @property
    def objectives(self):
        """Gets the objectives of this Pure1MetaPlacementRecommendation.  # noqa: E501


        :return: The objectives of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :rtype: Pure1MetaPlacementRecommendationObjectives
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """Sets the objectives of this Pure1MetaPlacementRecommendation.


        :param objectives: The objectives of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :type: Pure1MetaPlacementRecommendationObjectives
        """

        self._objectives = objectives

    @property
    def load_values(self):
        """Gets the load_values of this Pure1MetaPlacementRecommendation.  # noqa: E501


        :return: The load_values of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :rtype: Pure1MetaPlacementRecommendationLoadValues
        """
        return self._load_values

    @load_values.setter
    def load_values(self, load_values):
        """Sets the load_values of this Pure1MetaPlacementRecommendation.


        :param load_values: The load_values of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :type: Pure1MetaPlacementRecommendationLoadValues
        """

        self._load_values = load_values

    @property
    def capacity_values(self):
        """Gets the capacity_values of this Pure1MetaPlacementRecommendation.  # noqa: E501


        :return: The capacity_values of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :rtype: list[Pure1MetaValue]
        """
        return self._capacity_values

    @capacity_values.setter
    def capacity_values(self, capacity_values):
        """Sets the capacity_values of this Pure1MetaPlacementRecommendation.


        :param capacity_values: The capacity_values of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :type: list[Pure1MetaValue]
        """

        self._capacity_values = capacity_values

    @property
    def days_to_reach_90_percent_capacity(self):
        """Gets the days_to_reach_90_percent_capacity of this Pure1MetaPlacementRecommendation.  # noqa: E501


        :return: The days_to_reach_90_percent_capacity of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :rtype: float
        """
        return self._days_to_reach_90_percent_capacity

    @days_to_reach_90_percent_capacity.setter
    def days_to_reach_90_percent_capacity(self, days_to_reach_90_percent_capacity):
        """Sets the days_to_reach_90_percent_capacity of this Pure1MetaPlacementRecommendation.


        :param days_to_reach_90_percent_capacity: The days_to_reach_90_percent_capacity of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :type: float
        """

        self._days_to_reach_90_percent_capacity = days_to_reach_90_percent_capacity

    @property
    def days_to_reach_100_percent_capacity(self):
        """Gets the days_to_reach_100_percent_capacity of this Pure1MetaPlacementRecommendation.  # noqa: E501


        :return: The days_to_reach_100_percent_capacity of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :rtype: float
        """
        return self._days_to_reach_100_percent_capacity

    @days_to_reach_100_percent_capacity.setter
    def days_to_reach_100_percent_capacity(self, days_to_reach_100_percent_capacity):
        """Sets the days_to_reach_100_percent_capacity of this Pure1MetaPlacementRecommendation.


        :param days_to_reach_100_percent_capacity: The days_to_reach_100_percent_capacity of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :type: float
        """

        self._days_to_reach_100_percent_capacity = days_to_reach_100_percent_capacity

    @property
    def error(self):
        """Gets the error of this Pure1MetaPlacementRecommendation.  # noqa: E501


        :return: The error of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Pure1MetaPlacementRecommendation.


        :param error: The error of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def warnings(self):
        """Gets the warnings of this Pure1MetaPlacementRecommendation.  # noqa: E501


        :return: The warnings of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :rtype: list[Pure1MetaWarning]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Pure1MetaPlacementRecommendation.


        :param warnings: The warnings of this Pure1MetaPlacementRecommendation.  # noqa: E501
        :type: list[Pure1MetaWarning]
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pure1MetaPlacementRecommendation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pure1MetaPlacementRecommendation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
