# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pure1MetaValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp_ms': 'int',
        'value': 'float',
        'confidence_interval': 'Pure1MetaValueConfidenceInterval'
    }

    attribute_map = {
        'timestamp_ms': 'timestamp_ms',
        'value': 'value',
        'confidence_interval': 'confidence_interval'
    }

    def __init__(self, timestamp_ms=None, value=None, confidence_interval=None):  # noqa: E501
        """Pure1MetaValue - a model defined in Swagger"""  # noqa: E501
        self._timestamp_ms = None
        self._value = None
        self._confidence_interval = None
        self.discriminator = None
        if timestamp_ms is not None:
            self.timestamp_ms = timestamp_ms
        if value is not None:
            self.value = value
        if confidence_interval is not None:
            self.confidence_interval = confidence_interval

    @property
    def timestamp_ms(self):
        """Gets the timestamp_ms of this Pure1MetaValue.  # noqa: E501


        :return: The timestamp_ms of this Pure1MetaValue.  # noqa: E501
        :rtype: int
        """
        return self._timestamp_ms

    @timestamp_ms.setter
    def timestamp_ms(self, timestamp_ms):
        """Sets the timestamp_ms of this Pure1MetaValue.


        :param timestamp_ms: The timestamp_ms of this Pure1MetaValue.  # noqa: E501
        :type: int
        """

        self._timestamp_ms = timestamp_ms

    @property
    def value(self):
        """Gets the value of this Pure1MetaValue.  # noqa: E501


        :return: The value of this Pure1MetaValue.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Pure1MetaValue.


        :param value: The value of this Pure1MetaValue.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def confidence_interval(self):
        """Gets the confidence_interval of this Pure1MetaValue.  # noqa: E501


        :return: The confidence_interval of this Pure1MetaValue.  # noqa: E501
        :rtype: Pure1MetaValueConfidenceInterval
        """
        return self._confidence_interval

    @confidence_interval.setter
    def confidence_interval(self, confidence_interval):
        """Sets the confidence_interval of this Pure1MetaValue.


        :param confidence_interval: The confidence_interval of this Pure1MetaValue.  # noqa: E501
        :type: Pure1MetaValueConfidenceInterval
        """

        self._confidence_interval = confidence_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pure1MetaValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pure1MetaValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
