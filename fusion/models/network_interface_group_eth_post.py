# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkInterfaceGroupEthPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prefix': 'str',
        'gateway': 'str',
        'mtu': 'int'
    }

    attribute_map = {
        'prefix': 'prefix',
        'gateway': 'gateway',
        'mtu': 'mtu'
    }

    def __init__(self, prefix=None, gateway=None, mtu=None):  # noqa: E501
        """NetworkInterfaceGroupEthPost - a model defined in Swagger"""  # noqa: E501
        self._prefix = None
        self._gateway = None
        self._mtu = None
        self.discriminator = None
        self.prefix = prefix
        if gateway is not None:
            self.gateway = gateway
        self.mtu = mtu

    @property
    def prefix(self):
        """Gets the prefix of this NetworkInterfaceGroupEthPost.  # noqa: E501

        The IPv4 prefix for Network Interfaces in this Network Interface Group.  # noqa: E501

        :return: The prefix of this NetworkInterfaceGroupEthPost.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this NetworkInterfaceGroupEthPost.

        The IPv4 prefix for Network Interfaces in this Network Interface Group.  # noqa: E501

        :param prefix: The prefix of this NetworkInterfaceGroupEthPost.  # noqa: E501
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def gateway(self):
        """Gets the gateway of this NetworkInterfaceGroupEthPost.  # noqa: E501

        The IPv4 address of the gateway for Network Interfaces in this Network Interface Group.  # noqa: E501

        :return: The gateway of this NetworkInterfaceGroupEthPost.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this NetworkInterfaceGroupEthPost.

        The IPv4 address of the gateway for Network Interfaces in this Network Interface Group.  # noqa: E501

        :param gateway: The gateway of this NetworkInterfaceGroupEthPost.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def mtu(self):
        """Gets the mtu of this NetworkInterfaceGroupEthPost.  # noqa: E501

        Maximum message transfer unit (packet) size in bytes for the Network Interfaces in this Network Interface Group. MTU setting cannot exceed the MTU of the underlying physical interfaces.  # noqa: E501

        :return: The mtu of this NetworkInterfaceGroupEthPost.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NetworkInterfaceGroupEthPost.

        Maximum message transfer unit (packet) size in bytes for the Network Interfaces in this Network Interface Group. MTU setting cannot exceed the MTU of the underlying physical interfaces.  # noqa: E501

        :param mtu: The mtu of this NetworkInterfaceGroupEthPost.  # noqa: E501
        :type: int
        """
        if mtu is None:
            raise ValueError("Invalid value for `mtu`, must not be `None`")  # noqa: E501

        self._mtu = mtu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkInterfaceGroupEthPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkInterfaceGroupEthPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
