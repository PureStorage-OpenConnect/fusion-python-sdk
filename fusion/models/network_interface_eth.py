# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkInterfaceEth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'gateway': 'str',
        'mac_address': 'str',
        'mtu': 'int',
        'vlan': 'int'
    }

    attribute_map = {
        'address': 'address',
        'gateway': 'gateway',
        'mac_address': 'mac_address',
        'mtu': 'mtu',
        'vlan': 'vlan'
    }

    def __init__(self, address=None, gateway=None, mac_address=None, mtu=None, vlan=None):  # noqa: E501
        """NetworkInterfaceEth - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._gateway = None
        self._mac_address = None
        self._mtu = None
        self._vlan = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if gateway is not None:
            self.gateway = gateway
        if mac_address is not None:
            self.mac_address = mac_address
        if mtu is not None:
            self.mtu = mtu
        if vlan is not None:
            self.vlan = vlan

    @property
    def address(self):
        """Gets the address of this NetworkInterfaceEth.  # noqa: E501

        The IPv4 address associated with this Network Interface.  # noqa: E501

        :return: The address of this NetworkInterfaceEth.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this NetworkInterfaceEth.

        The IPv4 address associated with this Network Interface.  # noqa: E501

        :param address: The address of this NetworkInterfaceEth.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def gateway(self):
        """Gets the gateway of this NetworkInterfaceEth.  # noqa: E501

        The IPv4 address of the gateway through which this Network Interface will communicate with the network.  # noqa: E501

        :return: The gateway of this NetworkInterfaceEth.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this NetworkInterfaceEth.

        The IPv4 address of the gateway through which this Network Interface will communicate with the network.  # noqa: E501

        :param gateway: The gateway of this NetworkInterfaceEth.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def mac_address(self):
        """Gets the mac_address of this NetworkInterfaceEth.  # noqa: E501

        The media access control address associated with this Network Interface.  # noqa: E501

        :return: The mac_address of this NetworkInterfaceEth.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this NetworkInterfaceEth.

        The media access control address associated with this Network Interface.  # noqa: E501

        :param mac_address: The mac_address of this NetworkInterfaceEth.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def mtu(self):
        """Gets the mtu of this NetworkInterfaceEth.  # noqa: E501

        The maximum message transfer unit size for this Network Interface (in bytes).  # noqa: E501

        :return: The mtu of this NetworkInterfaceEth.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NetworkInterfaceEth.

        The maximum message transfer unit size for this Network Interface (in bytes).  # noqa: E501

        :param mtu: The mtu of this NetworkInterfaceEth.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    @property
    def vlan(self):
        """Gets the vlan of this NetworkInterfaceEth.  # noqa: E501

        The VLAN ID for this Network Interface.  # noqa: E501

        :return: The vlan of this NetworkInterfaceEth.  # noqa: E501
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this NetworkInterfaceEth.

        The VLAN ID for this Network Interface.  # noqa: E501

        :param vlan: The vlan of this NetworkInterfaceEth.  # noqa: E501
        :type: int
        """

        self._vlan = vlan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkInterfaceEth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkInterfaceEth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
