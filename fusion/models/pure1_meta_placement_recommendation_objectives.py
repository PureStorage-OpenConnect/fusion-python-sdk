# coding: utf-8

"""
    Pure Fusion API

    Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status \"Pending\" or \"Running\". You can poll (GET) the operation to check its status, waiting for it to change to \"Succeeded\" or \"Failed\".   # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Pure1MetaPlacementRecommendationObjectives(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avg_perf_usage': 'float',
        'avg_cap_usage': 'float',
        'var_perf_usage': 'float',
        'var_cap_usage': 'float',
        'max_perf_usage': 'float',
        'max_cap_usage': 'float'
    }

    attribute_map = {
        'avg_perf_usage': 'avg_perf_usage',
        'avg_cap_usage': 'avg_cap_usage',
        'var_perf_usage': 'var_perf_usage',
        'var_cap_usage': 'var_cap_usage',
        'max_perf_usage': 'max_perf_usage',
        'max_cap_usage': 'max_cap_usage'
    }

    def __init__(self, avg_perf_usage=None, avg_cap_usage=None, var_perf_usage=None, var_cap_usage=None, max_perf_usage=None, max_cap_usage=None):  # noqa: E501
        """Pure1MetaPlacementRecommendationObjectives - a model defined in Swagger"""  # noqa: E501
        self._avg_perf_usage = None
        self._avg_cap_usage = None
        self._var_perf_usage = None
        self._var_cap_usage = None
        self._max_perf_usage = None
        self._max_cap_usage = None
        self.discriminator = None
        if avg_perf_usage is not None:
            self.avg_perf_usage = avg_perf_usage
        if avg_cap_usage is not None:
            self.avg_cap_usage = avg_cap_usage
        if var_perf_usage is not None:
            self.var_perf_usage = var_perf_usage
        if var_cap_usage is not None:
            self.var_cap_usage = var_cap_usage
        if max_perf_usage is not None:
            self.max_perf_usage = max_perf_usage
        if max_cap_usage is not None:
            self.max_cap_usage = max_cap_usage

    @property
    def avg_perf_usage(self):
        """Gets the avg_perf_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The avg_perf_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._avg_perf_usage

    @avg_perf_usage.setter
    def avg_perf_usage(self, avg_perf_usage):
        """Sets the avg_perf_usage of this Pure1MetaPlacementRecommendationObjectives.


        :param avg_perf_usage: The avg_perf_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._avg_perf_usage = avg_perf_usage

    @property
    def avg_cap_usage(self):
        """Gets the avg_cap_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The avg_cap_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._avg_cap_usage

    @avg_cap_usage.setter
    def avg_cap_usage(self, avg_cap_usage):
        """Sets the avg_cap_usage of this Pure1MetaPlacementRecommendationObjectives.


        :param avg_cap_usage: The avg_cap_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._avg_cap_usage = avg_cap_usage

    @property
    def var_perf_usage(self):
        """Gets the var_perf_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The var_perf_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._var_perf_usage

    @var_perf_usage.setter
    def var_perf_usage(self, var_perf_usage):
        """Sets the var_perf_usage of this Pure1MetaPlacementRecommendationObjectives.


        :param var_perf_usage: The var_perf_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._var_perf_usage = var_perf_usage

    @property
    def var_cap_usage(self):
        """Gets the var_cap_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The var_cap_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._var_cap_usage

    @var_cap_usage.setter
    def var_cap_usage(self, var_cap_usage):
        """Sets the var_cap_usage of this Pure1MetaPlacementRecommendationObjectives.


        :param var_cap_usage: The var_cap_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._var_cap_usage = var_cap_usage

    @property
    def max_perf_usage(self):
        """Gets the max_perf_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The max_perf_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._max_perf_usage

    @max_perf_usage.setter
    def max_perf_usage(self, max_perf_usage):
        """Sets the max_perf_usage of this Pure1MetaPlacementRecommendationObjectives.


        :param max_perf_usage: The max_perf_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._max_perf_usage = max_perf_usage

    @property
    def max_cap_usage(self):
        """Gets the max_cap_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501


        :return: The max_cap_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :rtype: float
        """
        return self._max_cap_usage

    @max_cap_usage.setter
    def max_cap_usage(self, max_cap_usage):
        """Sets the max_cap_usage of this Pure1MetaPlacementRecommendationObjectives.


        :param max_cap_usage: The max_cap_usage of this Pure1MetaPlacementRecommendationObjectives.  # noqa: E501
        :type: float
        """

        self._max_cap_usage = max_cap_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pure1MetaPlacementRecommendationObjectives, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pure1MetaPlacementRecommendationObjectives):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
